// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  username      String
  email         String   @unique
  passwordHash  String
  createdAt     DateTime @default(now())
  currentStreak Int
  longestStreak Int?
  lastUsedDate  DateTime
  coinBalance   Int      @default(0)

  // Relations
  categories Category[] @relation("CreatedCategories")
  words      Word[]     @relation("userWords")
  purchases  Purchase[] @relation("userPurchases")
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @unique

  // Relations
  createdBy   User? @relation("CreatedCategories", fields: [createdById], references: [id])
  createdById Int

  words Word[] @relation("wordCategory")
}

model Word {
  id             Int      @id @default(autoincrement())
  originalText   String
  translatedText String
  discoveredAt   DateTime @default(now())
  picture        Bytes    @db.ByteA

  // Relations
  user   User @relation("userWords", fields: [userId], references: [id])
  userId Int

  category   Category @relation("wordCategory", fields: [categoryId], references: [id])
  categoryId Int
}

model Award {
  id      Int       @id @default(autoincrement())
  name    String
  type    AwardType
  price   Int
  iconUrl String?

  // Relations
  ownedBy Purchase[] @relation("AwardPurchases")
}

model Purchase {
  id        Int      @id @default(autoincrement())
  userId    Int
  awardId   Int
  createdAt DateTime @default(now())

  // Relations
  user  User  @relation("userPurchases", fields: [userId], references: [id])
  award Award @relation("AwardPurchases", fields: [awardId], references: [id])

  // composite key
  @@unique([userId, awardId])
}

enum AwardType {
  BACKGROUND_COLOR
  PROFILE_ICON
  ICON_BACKGROUND
  ICON_FRAME
}
